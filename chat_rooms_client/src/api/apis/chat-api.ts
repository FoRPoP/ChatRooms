/* tslint:disable */
/* eslint-disable */
/**
 * ChatRoomsWeb
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { Chat } from '../models';
import { ChatData } from '../models';
import { Message } from '../models';
import { UserInfo } from '../models';
/**
 * ChatApi - axios parameter creator
 * @export
 */
export const ChatApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [username] 
         * @param {string} [name] 
         * @param {string} [description] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chatCreateChatRoomPost: async (username?: string, name?: string, description?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Chat/CreateChatRoom`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (description !== undefined) {
                localVarQueryParameter['description'] = description;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [chatRoomId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chatDeleteChatRoomDelete: async (chatRoomId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Chat/DeleteChatRoom`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (chatRoomId !== undefined) {
                localVarQueryParameter['chatRoomId'] = chatRoomId;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [chatRoomId] 
         * @param {string} [username] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chatFavouriteChatRoomPost: async (chatRoomId?: string, username?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Chat/FavouriteChatRoom`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (chatRoomId !== undefined) {
                localVarQueryParameter['chatRoomId'] = chatRoomId;
            }

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [chatRoomId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chatGetChatRoomGet: async (chatRoomId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Chat/GetChatRoom`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (chatRoomId !== undefined) {
                localVarQueryParameter['chatRoomId'] = chatRoomId;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chatGetChatRoomsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Chat/GetChatRooms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [username] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chatGetUserInfoGet: async (username?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Chat/GetUserInfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [chatRoomId] 
         * @param {string} [username] 
         * @param {string} [connectionId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chatJoinChatRoomPost: async (chatRoomId?: string, username?: string, connectionId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Chat/JoinChatRoom`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (chatRoomId !== undefined) {
                localVarQueryParameter['chatRoomId'] = chatRoomId;
            }

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }

            if (connectionId !== undefined) {
                localVarQueryParameter['connectionId'] = connectionId;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [chatRoomId] 
         * @param {string} [username] 
         * @param {string} [connectionId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chatLeaveChatRoomPost: async (chatRoomId?: string, username?: string, connectionId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Chat/LeaveChatRoom`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (chatRoomId !== undefined) {
                localVarQueryParameter['chatRoomId'] = chatRoomId;
            }

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }

            if (connectionId !== undefined) {
                localVarQueryParameter['connectionId'] = connectionId;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Message} [body] 
         * @param {string} [chatRoomId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chatSendMessagePost: async (body?: Message, chatRoomId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Chat/SendMessage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (chatRoomId !== undefined) {
                localVarQueryParameter['chatRoomId'] = chatRoomId;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers!['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChatApi - functional programming interface
 * @export
 */
export const ChatApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [username] 
         * @param {string} [name] 
         * @param {string} [description] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async chatCreateChatRoomPost(username?: string, name?: string, description?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<boolean>>> {
            const localVarAxiosArgs = await ChatApiAxiosParamCreator(configuration).chatCreateChatRoomPost(username, name, description, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [chatRoomId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async chatDeleteChatRoomDelete(chatRoomId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<boolean>>> {
            const localVarAxiosArgs = await ChatApiAxiosParamCreator(configuration).chatDeleteChatRoomDelete(chatRoomId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [chatRoomId] 
         * @param {string} [username] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async chatFavouriteChatRoomPost(chatRoomId?: string, username?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<boolean>>> {
            const localVarAxiosArgs = await ChatApiAxiosParamCreator(configuration).chatFavouriteChatRoomPost(chatRoomId, username, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [chatRoomId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async chatGetChatRoomGet(chatRoomId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ChatData>>> {
            const localVarAxiosArgs = await ChatApiAxiosParamCreator(configuration).chatGetChatRoomGet(chatRoomId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async chatGetChatRoomsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<{ [key: string]: ChatData; }>>> {
            const localVarAxiosArgs = await ChatApiAxiosParamCreator(configuration).chatGetChatRoomsGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [username] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async chatGetUserInfoGet(username?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<UserInfo>>> {
            const localVarAxiosArgs = await ChatApiAxiosParamCreator(configuration).chatGetUserInfoGet(username, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [chatRoomId] 
         * @param {string} [username] 
         * @param {string} [connectionId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async chatJoinChatRoomPost(chatRoomId?: string, username?: string, connectionId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Chat>>> {
            const localVarAxiosArgs = await ChatApiAxiosParamCreator(configuration).chatJoinChatRoomPost(chatRoomId, username, connectionId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [chatRoomId] 
         * @param {string} [username] 
         * @param {string} [connectionId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async chatLeaveChatRoomPost(chatRoomId?: string, username?: string, connectionId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<boolean>>> {
            const localVarAxiosArgs = await ChatApiAxiosParamCreator(configuration).chatLeaveChatRoomPost(chatRoomId, username, connectionId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {Message} [body] 
         * @param {string} [chatRoomId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async chatSendMessagePost(body?: Message, chatRoomId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<boolean>>> {
            const localVarAxiosArgs = await ChatApiAxiosParamCreator(configuration).chatSendMessagePost(body, chatRoomId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ChatApi - factory interface
 * @export
 */
export const ChatApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} [username] 
         * @param {string} [name] 
         * @param {string} [description] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async chatCreateChatRoomPost(username?: string, name?: string, description?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<boolean>> {
            return ChatApiFp(configuration).chatCreateChatRoomPost(username, name, description, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [chatRoomId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async chatDeleteChatRoomDelete(chatRoomId?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<boolean>> {
            return ChatApiFp(configuration).chatDeleteChatRoomDelete(chatRoomId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [chatRoomId] 
         * @param {string} [username] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async chatFavouriteChatRoomPost(chatRoomId?: string, username?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<boolean>> {
            return ChatApiFp(configuration).chatFavouriteChatRoomPost(chatRoomId, username, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [chatRoomId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async chatGetChatRoomGet(chatRoomId?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<ChatData>> {
            return ChatApiFp(configuration).chatGetChatRoomGet(chatRoomId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async chatGetChatRoomsGet(options?: AxiosRequestConfig): Promise<AxiosResponse<{ [key: string]: ChatData; }>> {
            return ChatApiFp(configuration).chatGetChatRoomsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [username] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async chatGetUserInfoGet(username?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<UserInfo>> {
            return ChatApiFp(configuration).chatGetUserInfoGet(username, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [chatRoomId] 
         * @param {string} [username] 
         * @param {string} [connectionId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async chatJoinChatRoomPost(chatRoomId?: string, username?: string, connectionId?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Chat>> {
            return ChatApiFp(configuration).chatJoinChatRoomPost(chatRoomId, username, connectionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [chatRoomId] 
         * @param {string} [username] 
         * @param {string} [connectionId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async chatLeaveChatRoomPost(chatRoomId?: string, username?: string, connectionId?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<boolean>> {
            return ChatApiFp(configuration).chatLeaveChatRoomPost(chatRoomId, username, connectionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Message} [body] 
         * @param {string} [chatRoomId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async chatSendMessagePost(body?: Message, chatRoomId?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<boolean>> {
            return ChatApiFp(configuration).chatSendMessagePost(body, chatRoomId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ChatApi - object-oriented interface
 * @export
 * @class ChatApi
 * @extends {BaseAPI}
 */
export class ChatApi extends BaseAPI {
    /**
     * 
     * @param {string} [username] 
     * @param {string} [name] 
     * @param {string} [description] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    public async chatCreateChatRoomPost(username?: string, name?: string, description?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<boolean>> {
        return ChatApiFp(this.configuration).chatCreateChatRoomPost(username, name, description, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} [chatRoomId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    public async chatDeleteChatRoomDelete(chatRoomId?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<boolean>> {
        return ChatApiFp(this.configuration).chatDeleteChatRoomDelete(chatRoomId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} [chatRoomId] 
     * @param {string} [username] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    public async chatFavouriteChatRoomPost(chatRoomId?: string, username?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<boolean>> {
        return ChatApiFp(this.configuration).chatFavouriteChatRoomPost(chatRoomId, username, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} [chatRoomId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    public async chatGetChatRoomGet(chatRoomId?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<ChatData>> {
        return ChatApiFp(this.configuration).chatGetChatRoomGet(chatRoomId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    public async chatGetChatRoomsGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<{ [key: string]: ChatData; }>> {
        return ChatApiFp(this.configuration).chatGetChatRoomsGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} [username] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    public async chatGetUserInfoGet(username?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<UserInfo>> {
        return ChatApiFp(this.configuration).chatGetUserInfoGet(username, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} [chatRoomId] 
     * @param {string} [username] 
     * @param {string} [connectionId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    public async chatJoinChatRoomPost(chatRoomId?: string, username?: string, connectionId?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Chat>> {
        return ChatApiFp(this.configuration).chatJoinChatRoomPost(chatRoomId, username, connectionId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} [chatRoomId] 
     * @param {string} [username] 
     * @param {string} [connectionId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    public async chatLeaveChatRoomPost(chatRoomId?: string, username?: string, connectionId?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<boolean>> {
        return ChatApiFp(this.configuration).chatLeaveChatRoomPost(chatRoomId, username, connectionId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {Message} [body] 
     * @param {string} [chatRoomId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    public async chatSendMessagePost(body?: Message, chatRoomId?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<boolean>> {
        return ChatApiFp(this.configuration).chatSendMessagePost(body, chatRoomId, options).then((request) => request(this.axios, this.basePath));
    }
}
